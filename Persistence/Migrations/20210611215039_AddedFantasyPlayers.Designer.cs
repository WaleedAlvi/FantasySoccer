// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210611215039_AddedFantasyPlayers")]
    partial class AddedFantasyPlayers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.Property<Guid>("FantasyTeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderOneID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderTwoID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FantasyTeamLogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Hello World, This  is an image");

                    b.Property<Guid>("GoalieOneID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GoalieTwoID")
                        .HasColumnType("TEXT");

                    b.Property<double>("MoneyBalance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.HasKey("FantasyTeamID");

                    b.HasIndex("DefenderOneID");

                    b.HasIndex("DefenderTwoID");

                    b.HasIndex("GoalieOneID");

                    b.HasIndex("GoalieTwoID");

                    b.HasIndex("PersonID");

                    b.ToTable("FantasyTeams");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Property<Guid>("LeagueID")
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeagueLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LeagueID");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<Guid>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Injured")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeagueID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("FirebaseID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonID")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.HasOne("Domain.League", "League")
                        .WithOne("Country")
                        .HasForeignKey("Domain.Country", "CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithOne("Country")
                        .HasForeignKey("Domain.Country", "CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "Player")
                        .WithOne("Country")
                        .HasForeignKey("Domain.Country", "CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Person");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.HasOne("Domain.Player", "DefenderOne")
                        .WithMany("DefenderOneFantasyTeams")
                        .HasForeignKey("DefenderOneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderTwo")
                        .WithMany("DefenderTwoFantasyTeams")
                        .HasForeignKey("DefenderTwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "GoalieOne")
                        .WithMany("GoalieOneFantasyTeams")
                        .HasForeignKey("GoalieOneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "GoalieTwo")
                        .WithMany("GoalieTwoFantasyTeams")
                        .HasForeignKey("GoalieTwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefenderOne");

                    b.Navigation("DefenderTwo");

                    b.Navigation("GoalieOne");

                    b.Navigation("GoalieTwo");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.HasOne("Domain.Team", "Team")
                        .WithOne("League")
                        .HasForeignKey("Domain.League", "LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("Domain.Person", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.HasOne("Domain.Person", "Person")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "Player")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("FantasyTeams");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("DefenderOneFantasyTeams");

                    b.Navigation("DefenderTwoFantasyTeams");

                    b.Navigation("GoalieOneFantasyTeams");

                    b.Navigation("GoalieTwoFantasyTeams");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Navigation("League");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210611220322_Added FantasyPlayers Table")]
    partial class AddedFantasyPlayersTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.Property<Guid>("FantasyTeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderFiveID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderFourID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderOneID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderThreeID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefenderTwoID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FantasyTeamLogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Hello World, This  is an image");

                    b.Property<Guid>("ForwardOneID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ForwardThreeID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ForwardTwoID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GoalieOneID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GoalieTwoID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MidfielderFiveID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MidfielderFourID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MidfielderOneID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MidfielderThreeID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MidfielderTwoID")
                        .HasColumnType("TEXT");

                    b.Property<double>("MoneyBalance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerID1")
                        .HasColumnType("TEXT");

                    b.HasKey("FantasyTeamID");

                    b.HasIndex("DefenderFiveID");

                    b.HasIndex("DefenderFourID");

                    b.HasIndex("DefenderOneID");

                    b.HasIndex("DefenderThreeID");

                    b.HasIndex("DefenderTwoID");

                    b.HasIndex("ForwardOneID");

                    b.HasIndex("ForwardThreeID");

                    b.HasIndex("ForwardTwoID");

                    b.HasIndex("GoalieOneID");

                    b.HasIndex("GoalieTwoID");

                    b.HasIndex("MidfielderFiveID");

                    b.HasIndex("MidfielderFourID");

                    b.HasIndex("MidfielderOneID");

                    b.HasIndex("MidfielderThreeID");

                    b.HasIndex("MidfielderTwoID");

                    b.HasIndex("PersonID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("PlayerID1");

                    b.ToTable("FantasyTeams");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Property<Guid>("LeagueID")
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeagueLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LeagueID");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<Guid>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Injured")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("TEXT");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LeagueID")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("FirebaseID")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.HasOne("Domain.League", "League")
                        .WithOne("Country")
                        .HasForeignKey("Domain.Country", "CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithOne("Country")
                        .HasForeignKey("Domain.Country", "CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "Player")
                        .WithOne("Country")
                        .HasForeignKey("Domain.Country", "CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Person");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.HasOne("Domain.Player", "DefenderFive")
                        .WithMany("DefenderFiveFantasyTeams")
                        .HasForeignKey("DefenderFiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderFour")
                        .WithMany("DefenderFourFantasyTeams")
                        .HasForeignKey("DefenderFourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderOne")
                        .WithMany("DefenderOneFantasyTeams")
                        .HasForeignKey("DefenderOneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderThree")
                        .WithMany("DefenderThreeFantasyTeams")
                        .HasForeignKey("DefenderThreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderTwo")
                        .WithMany("DefenderTwoFantasyTeams")
                        .HasForeignKey("DefenderTwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "ForwardOne")
                        .WithMany("ForwardOneFantasyTeams")
                        .HasForeignKey("ForwardOneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "ForwardThree")
                        .WithMany("ForwardThreeFantasyTeams")
                        .HasForeignKey("ForwardThreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "ForwardTwo")
                        .WithMany("ForwardTwoFantasyTeams")
                        .HasForeignKey("ForwardTwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "GoalieOne")
                        .WithMany("GoalieOneFantasyTeams")
                        .HasForeignKey("GoalieOneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "GoalieTwo")
                        .WithMany("GoalieTwoFantasyTeams")
                        .HasForeignKey("GoalieTwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderFive")
                        .WithMany("MidfielderFiveFantasyTeams")
                        .HasForeignKey("MidfielderFiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderFour")
                        .WithMany("MidfielderFourFantasyTeams")
                        .HasForeignKey("MidfielderFourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderOne")
                        .WithMany("MidfielderOneFantasyTeams")
                        .HasForeignKey("MidfielderOneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderThree")
                        .WithMany("MidfielderThreeFantasyTeams")
                        .HasForeignKey("MidfielderThreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderTwo")
                        .WithMany("MidfielderTwoFantasyTeams")
                        .HasForeignKey("MidfielderTwoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", null)
                        .WithMany("ForwardFiveFantasyTeams")
                        .HasForeignKey("PlayerID");

                    b.HasOne("Domain.Player", null)
                        .WithMany("ForwardFourFantasyTeams")
                        .HasForeignKey("PlayerID1");

                    b.Navigation("DefenderFive");

                    b.Navigation("DefenderFour");

                    b.Navigation("DefenderOne");

                    b.Navigation("DefenderThree");

                    b.Navigation("DefenderTwo");

                    b.Navigation("ForwardOne");

                    b.Navigation("ForwardThree");

                    b.Navigation("ForwardTwo");

                    b.Navigation("GoalieOne");

                    b.Navigation("GoalieTwo");

                    b.Navigation("MidfielderFive");

                    b.Navigation("MidfielderFour");

                    b.Navigation("MidfielderOne");

                    b.Navigation("MidfielderThree");

                    b.Navigation("MidfielderTwo");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.HasOne("Domain.Team", "Team")
                        .WithOne("League")
                        .HasForeignKey("Domain.League", "LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("Domain.Person", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.HasOne("Domain.Person", "Person")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", "Player")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("FantasyTeams");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("DefenderFiveFantasyTeams");

                    b.Navigation("DefenderFourFantasyTeams");

                    b.Navigation("DefenderOneFantasyTeams");

                    b.Navigation("DefenderThreeFantasyTeams");

                    b.Navigation("DefenderTwoFantasyTeams");

                    b.Navigation("ForwardFiveFantasyTeams");

                    b.Navigation("ForwardFourFantasyTeams");

                    b.Navigation("ForwardOneFantasyTeams");

                    b.Navigation("ForwardThreeFantasyTeams");

                    b.Navigation("ForwardTwoFantasyTeams");

                    b.Navigation("GoalieOneFantasyTeams");

                    b.Navigation("GoalieTwoFantasyTeams");

                    b.Navigation("MidfielderFiveFantasyTeams");

                    b.Navigation("MidfielderFourFantasyTeams");

                    b.Navigation("MidfielderOneFantasyTeams");

                    b.Navigation("MidfielderThreeFantasyTeams");

                    b.Navigation("MidfielderTwoFantasyTeams");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Navigation("League");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}

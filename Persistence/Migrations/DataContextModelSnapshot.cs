// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.FantasyLeague", b =>
                {
                    b.Property<Guid>("FantasyLeagueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LeagueCaption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeagueLogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Default League Logo");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTeams")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.HasKey("FantasyLeagueID");

                    b.HasIndex("LeagueKey")
                        .IsUnique()
                        .HasFilter("[LeagueKey] IS NOT NULL");

                    b.ToTable("FantasyLeagues");
                });

            modelBuilder.Entity("Domain.FantasyLeagueAdmin", b =>
                {
                    b.Property<Guid>("FantasyLeagueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FantasyLeagueID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("FantasyLeaguesAdmins");
                });

            modelBuilder.Entity("Domain.FantasyLeagueTeams", b =>
                {
                    b.Property<Guid>("FantasyLeagueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FantasyTeamID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FantasyLeagueID", "FantasyTeamID");

                    b.HasIndex("FantasyTeamID");

                    b.ToTable("FantasyLeagueTeams");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.Property<Guid>("FantasyTeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DefenderFiveID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefenderFourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefenderOneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefenderThreeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefenderTwoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FantasyTeamLogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Hello World, This  is an image");

                    b.Property<string>("FantasyTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForwardOneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForwardThreeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForwardTwoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoalieOneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoalieTwoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MidfielderFiveID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MidfielderFourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MidfielderOneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MidfielderThreeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MidfielderTwoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MoneyBalance")
                        .HasColumnType("float");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FantasyTeamID");

                    b.HasIndex("DefenderFiveID");

                    b.HasIndex("DefenderFourID");

                    b.HasIndex("DefenderOneID");

                    b.HasIndex("DefenderThreeID");

                    b.HasIndex("DefenderTwoID");

                    b.HasIndex("ForwardOneID");

                    b.HasIndex("ForwardThreeID");

                    b.HasIndex("ForwardTwoID");

                    b.HasIndex("GoalieOneID");

                    b.HasIndex("GoalieTwoID");

                    b.HasIndex("MidfielderFiveID");

                    b.HasIndex("MidfielderFourID");

                    b.HasIndex("MidfielderOneID");

                    b.HasIndex("MidfielderThreeID");

                    b.HasIndex("MidfielderTwoID");

                    b.HasIndex("PersonID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("PlayerID1");

                    b.ToTable("FantasyTeams");

                    b.HasCheckConstraint("CHK_GoalieOne_Unique", "GoalieOneID <> GoalieTwoID AND \r\n									                                                                       GoalieOneID <> DefenderOneID AND\r\n										                                                                   GoalieOneID <> DefenderTwoID AND\r\n										                                                                   GoalieOneID <> DefenderThreeID AND\r\n										                                                                   GoalieOneID <> DefenderFourID AND\r\n										                                                                   GoalieOneID <> DefenderFiveID AND\r\n										                                                                   GoalieOneID <> MidfielderOneID AND\r\n										                                                                   GoalieOneID <> MidfielderTwoID AND\r\n										                                                                   GoalieOneID <> MidfielderThreeID AND\r\n										                                                                   GoalieOneID <> MidfielderFourID AND\r\n										                                                                   GoalieOneID <> MidfielderFiveID AND\r\n										                                                                   GoalieOneID <> ForwardOneID AND\r\n										                                                                   GoalieOneID <> ForwardTwoID AND\r\n										                                                                   GoalieOneID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_GoalieTwo_Unique", "GoalieTwoID <> GoalieOneID AND \r\n                                                                                                           GoalieTwoID <> DefenderOneID AND\r\n                                                                                                           GoalieTwoID <> DefenderTwoID AND\r\n                                                                                                           GoalieTwoID <> DefenderThreeID AND\r\n                                                                                                           GoalieTwoID <> DefenderFourID AND\r\n                                                                                                           GoalieTwoID <> DefenderFiveID AND\r\n                                                                                                           GoalieTwoID <> MidfielderOneID AND\r\n                                                                                                           GoalieTwoID <> MidfielderTwoID AND\r\n                                                                                                           GoalieTwoID <> MidfielderThreeID AND\r\n                                                                                                           GoalieTwoID <> MidfielderFourID AND\r\n                                                                                                           GoalieTwoID <> MidfielderFiveID AND\r\n                                                                                                           GoalieTwoID <> ForwardOneID AND\r\n                                                                                                           GoalieTwoID <> ForwardTwoID AND\r\n                                                                                                           GoalieTwoID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_DefenderOne_Unique", "DefenderOneID <> GoalieTwoID AND \r\n                                                                                                             DefenderOneID <> GoalieOneID AND\r\n                                                                                                             DefenderOneID <> DefenderTwoID AND\r\n                                                                                                             DefenderOneID <> DefenderThreeID AND\r\n                                                                                                             DefenderOneID <> DefenderFourID AND\r\n                                                                                                             DefenderOneID <> DefenderFiveID AND\r\n                                                                                                             DefenderOneID <> MidfielderOneID AND\r\n                                                                                                             DefenderOneID <> MidfielderTwoID AND\r\n                                                                                                             DefenderOneID <> MidfielderThreeID AND\r\n                                                                                                             DefenderOneID <> MidfielderFourID AND\r\n                                                                                                             DefenderOneID <> MidfielderFiveID AND\r\n                                                                                                             DefenderOneID <> ForwardOneID AND\r\n                                                                                                             DefenderOneID <> ForwardTwoID AND\r\n                                                                                                             DefenderOneID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_DefenderTwo_Unique", "DefenderTwoID <> GoalieTwoID AND \r\n                                                                                                             DefenderTwoID <> DefenderOneID AND\r\n                                                                                                             DefenderTwoID <> GoalieOneID AND\r\n                                                                                                             DefenderTwoID <> DefenderThreeID AND\r\n                                                                                                             DefenderTwoID <> DefenderFourID AND\r\n                                                                                                             DefenderTwoID <> DefenderFiveID AND\r\n                                                                                                             DefenderTwoID <> MidfielderOneID AND\r\n                                                                                                             DefenderTwoID <> MidfielderTwoID AND\r\n                                                                                                             DefenderTwoID <> MidfielderThreeID AND\r\n                                                                                                             DefenderTwoID <> MidfielderFourID AND\r\n                                                                                                             DefenderTwoID <> MidfielderFiveID AND\r\n                                                                                                             DefenderTwoID <> ForwardOneID AND\r\n                                                                                                             DefenderTwoID <> ForwardTwoID AND\r\n                                                                                                             DefenderTwoID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_DefenderThree_Unique", "DefenderThreeID <> GoalieTwoID AND \r\n                                                                                                               DefenderThreeID <> DefenderOneID AND\r\n                                                                                                               DefenderThreeID <> DefenderTwoID AND\r\n                                                                                                               DefenderThreeID <> GoalieOneID AND\r\n                                                                                                               DefenderThreeID <> DefenderFourID AND\r\n                                                                                                               DefenderThreeID <> DefenderFiveID AND\r\n                                                                                                               DefenderThreeID <> MidfielderOneID AND\r\n                                                                                                               DefenderThreeID <> MidfielderTwoID AND\r\n                                                                                                               DefenderThreeID <> MidfielderThreeID AND\r\n                                                                                                               DefenderThreeID <> MidfielderFourID AND\r\n                                                                                                               DefenderThreeID <> MidfielderFiveID AND\r\n                                                                                                               DefenderThreeID <> ForwardOneID AND\r\n                                                                                                               DefenderThreeID <> ForwardTwoID AND\r\n                                                                                                               DefenderThreeID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_DefenderFour_Unique", "DefenderFourID <> GoalieTwoID AND \r\n                                                                                                              DefenderFourID <> DefenderOneID AND\r\n                                                                                                              DefenderFourID <> DefenderTwoID AND\r\n                                                                                                              DefenderFourID <> GoalieOneID AND\r\n                                                                                                              DefenderFourID <> DefenderThreeID AND\r\n                                                                                                              DefenderFourID <> DefenderFiveID AND\r\n                                                                                                              DefenderFourID <> MidfielderOneID AND\r\n                                                                                                              DefenderFourID <> MidfielderTwoID AND\r\n                                                                                                              DefenderFourID <> MidfielderThreeID AND\r\n                                                                                                              DefenderFourID <> MidfielderFourID AND\r\n                                                                                                              DefenderFourID <> MidfielderFiveID AND\r\n                                                                                                              DefenderFourID <> ForwardOneID AND\r\n                                                                                                              DefenderFourID <> ForwardTwoID AND\r\n                                                                                                              DefenderFourID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_DefenderFive_Unique", "DefenderFiveID <> GoalieTwoID AND \r\n                                                                                                              DefenderFiveID <> DefenderOneID AND\r\n                                                                                                              DefenderFiveID <> DefenderTwoID AND\r\n                                                                                                              DefenderFiveID <> DefenderThreeID AND\r\n                                                                                                              DefenderFiveID <> DefenderFourID AND\r\n                                                                                                              DefenderFiveID <> GoalieOneID AND\r\n                                                                                                              DefenderFiveID <> MidfielderOneID AND\r\n                                                                                                              DefenderFiveID <> MidfielderTwoID AND\r\n                                                                                                              DefenderFiveID <> MidfielderThreeID AND\r\n                                                                                                              DefenderFiveID <> MidfielderFourID AND\r\n                                                                                                              DefenderFiveID <> MidfielderFiveID AND\r\n                                                                                                              DefenderFiveID <> ForwardOneID AND\r\n                                                                                                              DefenderFiveID <> ForwardTwoID AND\r\n                                                                                                              DefenderFiveID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_MidfielderOne_Unique", "MidfielderOneID <> GoalieOneID AND \r\n                                                                                                               MidfielderOneID <> DefenderOneID AND\r\n                                                                                                               MidfielderOneID <> DefenderTwoID AND\r\n                                                                                                               MidfielderOneID <> DefenderThreeID AND\r\n                                                                                                               MidfielderOneID <> DefenderFourID AND\r\n                                                                                                               MidfielderOneID <> DefenderFiveID AND\r\n                                                                                                               MidfielderOneID <> GoalieTwoID AND\r\n                                                                                                               MidfielderOneID <> MidfielderTwoID AND\r\n                                                                                                               MidfielderOneID <> MidfielderThreeID AND\r\n                                                                                                               MidfielderOneID <> MidfielderFourID AND\r\n                                                                                                               MidfielderOneID <> MidfielderFiveID AND\r\n                                                                                                               MidfielderOneID <> ForwardOneID AND\r\n                                                                                                               MidfielderOneID <> ForwardTwoID AND\r\n                                                                                                               MidfielderOneID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_MidfielderTwo_Unique", "MidfielderTwoID <> GoalieTwoID AND \r\n                                                                                                               MidfielderTwoID <> GoalieOneID AND\r\n                                                                                                               MidfielderTwoID <> DefenderTwoID AND\r\n                                                                                                               MidfielderTwoID <> DefenderThreeID AND\r\n                                                                                                               MidfielderTwoID <> DefenderFourID AND\r\n                                                                                                               MidfielderTwoID <> DefenderFiveID AND\r\n                                                                                                               MidfielderTwoID <> MidfielderOneID AND\r\n                                                                                                               MidfielderTwoID <> DefenderOneID AND\r\n                                                                                                               MidfielderTwoID <> MidfielderThreeID AND\r\n                                                                                                               MidfielderTwoID <> MidfielderFourID AND\r\n                                                                                                               MidfielderTwoID <> MidfielderFiveID AND\r\n                                                                                                               MidfielderTwoID <> ForwardOneID AND\r\n                                                                                                               MidfielderTwoID <> ForwardTwoID AND\r\n                                                                                                               MidfielderTwoID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_MidfielderThree_Unique", "MidfielderThreeID <> GoalieOneID AND \r\n                                                                                                                 MidfielderThreeID <> DefenderOneID AND\r\n                                                                                                                 MidfielderThreeID <> DefenderTwoID AND\r\n                                                                                                                 MidfielderThreeID <> DefenderThreeID AND\r\n                                                                                                                 MidfielderThreeID <> DefenderFourID AND\r\n                                                                                                                 MidfielderThreeID <> DefenderFiveID AND\r\n                                                                                                                 MidfielderThreeID <> GoalieTwoID AND\r\n                                                                                                                 MidfielderThreeID <> MidfielderTwoID AND\r\n                                                                                                                 MidfielderThreeID <> MidfielderOneID AND\r\n                                                                                                                 MidfielderThreeID <> MidfielderFourID AND\r\n                                                                                                                 MidfielderThreeID <> MidfielderFiveID AND\r\n                                                                                                                 MidfielderThreeID <> ForwardOneID AND\r\n                                                                                                                 MidfielderThreeID <> ForwardTwoID AND\r\n                                                                                                                 MidfielderThreeID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_MidfielderFour_Unique", "MidfielderFourID <> GoalieTwoID AND \r\n                                                                                                                MidfielderFourID <> DefenderOneID AND\r\n                                                                                                                MidfielderFourID <> DefenderTwoID AND\r\n                                                                                                                MidfielderFourID <> GoalieOneID AND\r\n                                                                                                                MidfielderFourID <> DefenderFourID AND\r\n                                                                                                                MidfielderFourID <> DefenderFiveID AND\r\n                                                                                                                MidfielderFourID <> MidfielderOneID AND\r\n                                                                                                                MidfielderFourID <> MidfielderTwoID AND\r\n                                                                                                                MidfielderFourID <> MidfielderThreeID AND\r\n                                                                                                                MidfielderFourID <> DefenderThreeID AND\r\n                                                                                                                MidfielderFourID <> MidfielderFiveID AND\r\n                                                                                                                MidfielderFourID <> ForwardOneID AND\r\n                                                                                                                MidfielderFourID <> ForwardTwoID AND\r\n                                                                                                                MidfielderFourID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_MidfielderFive_Unique", "MidfielderFiveID <> GoalieOneID AND \r\n                                                                                                                MidfielderFiveID <> GoalieTwoID AND\r\n                                                                                                                MidfielderFiveID <> DefenderOneID AND\r\n                                                                                                                MidfielderFiveID <> DefenderTwoID AND\r\n                                                                                                                MidfielderFiveID <> DefenderThreeID AND\r\n                                                                                                                MidfielderFiveID <> DefenderFourID AND\r\n                                                                                                                MidfielderFiveID <> DefenderFiveID AND\r\n                                                                                                                MidfielderFiveID <> MidfielderOneID AND\r\n                                                                                                                MidfielderFiveID <> MidfielderTwoID AND\r\n                                                                                                                MidfielderFiveID <> MidfielderThreeID AND\r\n                                                                                                                MidfielderFiveID <> MidfielderFourID AND\r\n                                                                                                                MidfielderFiveID <> ForwardOneID AND\r\n                                                                                                                MidfielderFiveID <> ForwardTwoID AND\r\n                                                                                                                MidfielderFiveID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_ForwardOne_Unique", "ForwardOneID <> GoalieTwoID AND \r\n                                                                                                            ForwardOneID <> DefenderOneID AND\r\n                                                                                                            ForwardOneID <> DefenderTwoID AND\r\n                                                                                                            ForwardOneID <> DefenderThreeID AND\r\n                                                                                                            ForwardOneID <> DefenderFourID AND\r\n                                                                                                            ForwardOneID <> DefenderFiveID AND\r\n                                                                                                            ForwardOneID <> MidfielderOneID AND\r\n                                                                                                            ForwardOneID <> MidfielderTwoID AND\r\n                                                                                                            ForwardOneID <> MidfielderThreeID AND\r\n                                                                                                            ForwardOneID <> MidfielderFourID AND\r\n                                                                                                            ForwardOneID <> MidfielderFiveID AND\r\n                                                                                                            ForwardOneID <> GoalieOneID AND\r\n                                                                                                            ForwardOneID <> ForwardTwoID AND\r\n                                                                                                            ForwardOneID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_ForwardTwo_Unique", "ForwardTwoID <> GoalieOneID AND \r\n                                                                                                            ForwardTwoID <> DefenderOneID AND\r\n                                                                                                            ForwardTwoID <> DefenderTwoID AND\r\n                                                                                                            ForwardTwoID <> DefenderThreeID AND\r\n                                                                                                            ForwardTwoID <> DefenderFourID AND\r\n                                                                                                            ForwardTwoID <> DefenderFiveID AND\r\n                                                                                                            ForwardTwoID <> MidfielderOneID AND\r\n                                                                                                            ForwardTwoID <> MidfielderTwoID AND\r\n                                                                                                            ForwardTwoID <> MidfielderThreeID AND\r\n                                                                                                            ForwardTwoID <> MidfielderFourID AND\r\n                                                                                                            ForwardTwoID <> MidfielderFiveID AND\r\n                                                                                                            ForwardTwoID <> ForwardOneID AND\r\n                                                                                                            ForwardTwoID <> GoalieTwoID AND\r\n                                                                                                            ForwardTwoID <> ForwardThreeID");

                    b.HasCheckConstraint("CHK_ForwardThree_Unique", "ForwardThreeID <> GoalieTwoID AND \r\n                                                                                                              ForwardThreeID <> GoalieOneID AND\r\n                                                                                                              ForwardThreeID <> DefenderTwoID AND\r\n                                                                                                              ForwardThreeID <> DefenderThreeID AND\r\n                                                                                                              ForwardThreeID <> DefenderFourID AND\r\n                                                                                                              ForwardThreeID <> DefenderFiveID AND\r\n                                                                                                              ForwardThreeID <> MidfielderOneID AND\r\n                                                                                                              ForwardThreeID <> MidfielderTwoID AND\r\n                                                                                                              ForwardThreeID <> MidfielderThreeID AND\r\n                                                                                                              ForwardThreeID <> MidfielderFourID AND\r\n                                                                                                              ForwardThreeID <> MidfielderFiveID AND\r\n                                                                                                              ForwardThreeID <> ForwardOneID AND\r\n                                                                                                              ForwardThreeID <> ForwardTwoID AND\r\n                                                                                                              ForwardThreeID <> DefenderOneID");
                });

            modelBuilder.Entity("Domain.Formation", b =>
                {
                    b.Property<Guid>("FormationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefenderCount")
                        .HasColumnType("int");

                    b.Property<string>("FormationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForwardCount")
                        .HasColumnType("int");

                    b.Property<int>("MidfielderCount")
                        .HasColumnType("int");

                    b.HasKey("FormationID");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Property<Guid>("LeagueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("int");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeagueLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeagueID");

                    b.HasIndex("CountryID");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Domain.Matchday", b =>
                {
                    b.Property<Guid>("MatchdayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeagueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MatchdayCount")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchdayID");

                    b.HasIndex("LeagueID");

                    b.ToTable("Matchdays");
                });

            modelBuilder.Entity("Domain.MatchdayTeam", b =>
                {
                    b.Property<Guid>("MatchdayTeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BenchOneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BenchThreeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BenchTwoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GoalieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchdayTeamConfigurationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerEightID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerFiveID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerFourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerNineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerNinePlayerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerOneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerSevenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerSixID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerTenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerThreeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerTwoID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchdayTeamID");

                    b.HasIndex("BenchOneID");

                    b.HasIndex("BenchThreeID");

                    b.HasIndex("BenchTwoID");

                    b.HasIndex("GoalieID");

                    b.HasIndex("PlayerFiveID");

                    b.HasIndex("PlayerFourID");

                    b.HasIndex("PlayerNineID");

                    b.HasIndex("PlayerNinePlayerID");

                    b.HasIndex("PlayerOneID");

                    b.HasIndex("PlayerSevenID");

                    b.HasIndex("PlayerSixID");

                    b.HasIndex("PlayerTenID");

                    b.HasIndex("PlayerThreeID");

                    b.HasIndex("PlayerTwoID");

                    b.ToTable("MatchdayTeams");
                });

            modelBuilder.Entity("Domain.MatchdayTeamConfiguration", b =>
                {
                    b.Property<Guid>("MatchdayTeamConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaptainID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FantasyTeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchdayID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchdayTeamID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchdayTeamConfigurationID");

                    b.HasIndex("CaptainID");

                    b.HasIndex("FantasyTeamID");

                    b.HasIndex("FormationID");

                    b.HasIndex("MatchdayID");

                    b.HasIndex("MatchdayTeamID")
                        .IsUnique();

                    b.ToTable("MatchdayTeamConfigurations");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonID");

                    b.HasIndex("CountryID");

                    b.HasIndex("TeamID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<Guid>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("int");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("Injured")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("PlayerID");

                    b.HasIndex("CountryID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Property<Guid>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("APIFootballID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeagueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.HasIndex("LeagueID")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirebaseID")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.FantasyLeagueAdmin", b =>
                {
                    b.HasOne("Domain.FantasyLeague", "FantasyLeague")
                        .WithMany("FantasyLeagueAdmins")
                        .HasForeignKey("FantasyLeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("FantasyLeagueAdmins")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyLeague");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.FantasyLeagueTeams", b =>
                {
                    b.HasOne("Domain.FantasyLeague", "FantasyLeague")
                        .WithMany("FantasyLeagueTeams")
                        .HasForeignKey("FantasyLeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.FantasyTeam", "FantasyTeam")
                        .WithMany("FantasyLeagueTeams")
                        .HasForeignKey("FantasyTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyLeague");

                    b.Navigation("FantasyTeam");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.HasOne("Domain.Player", "DefenderFive")
                        .WithMany("DefenderFiveFantasyTeams")
                        .HasForeignKey("DefenderFiveID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderFour")
                        .WithMany("DefenderFourFantasyTeams")
                        .HasForeignKey("DefenderFourID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderOne")
                        .WithMany("DefenderOneFantasyTeams")
                        .HasForeignKey("DefenderOneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderThree")
                        .WithMany("DefenderThreeFantasyTeams")
                        .HasForeignKey("DefenderThreeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "DefenderTwo")
                        .WithMany("DefenderTwoFantasyTeams")
                        .HasForeignKey("DefenderTwoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "ForwardOne")
                        .WithMany("ForwardOneFantasyTeams")
                        .HasForeignKey("ForwardOneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "ForwardThree")
                        .WithMany("ForwardThreeFantasyTeams")
                        .HasForeignKey("ForwardThreeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "ForwardTwo")
                        .WithMany("ForwardTwoFantasyTeams")
                        .HasForeignKey("ForwardTwoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "GoalieOne")
                        .WithMany("GoalieOneFantasyTeams")
                        .HasForeignKey("GoalieOneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "GoalieTwo")
                        .WithMany("GoalieTwoFantasyTeams")
                        .HasForeignKey("GoalieTwoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderFive")
                        .WithMany("MidfielderFiveFantasyTeams")
                        .HasForeignKey("MidfielderFiveID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderFour")
                        .WithMany("MidfielderFourFantasyTeams")
                        .HasForeignKey("MidfielderFourID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderOne")
                        .WithMany("MidfielderOneFantasyTeams")
                        .HasForeignKey("MidfielderOneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderThree")
                        .WithMany("MidfielderThreeFantasyTeams")
                        .HasForeignKey("MidfielderThreeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "MidfielderTwo")
                        .WithMany("MidfielderTwoFantasyTeams")
                        .HasForeignKey("MidfielderTwoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Player", null)
                        .WithMany("ForwardFiveFantasyTeams")
                        .HasForeignKey("PlayerID");

                    b.HasOne("Domain.Player", null)
                        .WithMany("ForwardFourFantasyTeams")
                        .HasForeignKey("PlayerID1");

                    b.Navigation("DefenderFive");

                    b.Navigation("DefenderFour");

                    b.Navigation("DefenderOne");

                    b.Navigation("DefenderThree");

                    b.Navigation("DefenderTwo");

                    b.Navigation("ForwardOne");

                    b.Navigation("ForwardThree");

                    b.Navigation("ForwardTwo");

                    b.Navigation("GoalieOne");

                    b.Navigation("GoalieTwo");

                    b.Navigation("MidfielderFive");

                    b.Navigation("MidfielderFour");

                    b.Navigation("MidfielderOne");

                    b.Navigation("MidfielderThree");

                    b.Navigation("MidfielderTwo");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.HasOne("Domain.Country", "Country")
                        .WithMany("League")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Matchday", b =>
                {
                    b.HasOne("Domain.League", "League")
                        .WithMany("MatchDays")
                        .HasForeignKey("LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Domain.MatchdayTeam", b =>
                {
                    b.HasOne("Domain.Player", "BenchOne")
                        .WithMany("BenchOneMatchdayTeams")
                        .HasForeignKey("BenchOneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "BenchThree")
                        .WithMany("BenchThreeMatchdayTeams")
                        .HasForeignKey("BenchThreeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "BenchTwo")
                        .WithMany("BenchTwoMatchdayTeams")
                        .HasForeignKey("BenchTwoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "Goalie")
                        .WithMany("GoalieMatchdayTeams")
                        .HasForeignKey("GoalieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerFive")
                        .WithMany("PlayerFiveMatchdayTeams")
                        .HasForeignKey("PlayerFiveID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerFour")
                        .WithMany("PlayerFourMatchdayTeams")
                        .HasForeignKey("PlayerFourID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerEight")
                        .WithMany("PlayerEightMatchdayTeams")
                        .HasForeignKey("PlayerNineID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerNine")
                        .WithMany("PlayerNineMatchdayTeams")
                        .HasForeignKey("PlayerNinePlayerID");

                    b.HasOne("Domain.Player", "PlayerOne")
                        .WithMany("PlayerOneMatchdayTeams")
                        .HasForeignKey("PlayerOneID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerSeven")
                        .WithMany("PlayerSevenMatchdayTeams")
                        .HasForeignKey("PlayerSevenID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerSix")
                        .WithMany("PlayerSixMatchdayTeams")
                        .HasForeignKey("PlayerSixID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerTen")
                        .WithMany("PlayerTenMatchdayTeams")
                        .HasForeignKey("PlayerTenID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerThree")
                        .WithMany("PlayerThreeMatchdayTeams")
                        .HasForeignKey("PlayerThreeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerTwo")
                        .WithMany("PlayerTwoMatchdayTeams")
                        .HasForeignKey("PlayerTwoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BenchOne");

                    b.Navigation("BenchThree");

                    b.Navigation("BenchTwo");

                    b.Navigation("Goalie");

                    b.Navigation("PlayerEight");

                    b.Navigation("PlayerFive");

                    b.Navigation("PlayerFour");

                    b.Navigation("PlayerNine");

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerSeven");

                    b.Navigation("PlayerSix");

                    b.Navigation("PlayerTen");

                    b.Navigation("PlayerThree");

                    b.Navigation("PlayerTwo");
                });

            modelBuilder.Entity("Domain.MatchdayTeamConfiguration", b =>
                {
                    b.HasOne("Domain.Player", "Player")
                        .WithMany("MatchdayTeamConfiguration")
                        .HasForeignKey("CaptainID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.FantasyTeam", "FantasyTeam")
                        .WithMany("MatchdayTeamConfiguration")
                        .HasForeignKey("FantasyTeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Formation", "Formation")
                        .WithMany("MatchdayTeamConfiguration")
                        .HasForeignKey("FormationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Matchday", "Matchday")
                        .WithMany("MatchdayTeamConfiguration")
                        .HasForeignKey("MatchdayID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.MatchdayTeam", "MatchdayTeam")
                        .WithOne("MatchdayTeamConfiguration")
                        .HasForeignKey("Domain.MatchdayTeamConfiguration", "MatchdayTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyTeam");

                    b.Navigation("Formation");

                    b.Navigation("Matchday");

                    b.Navigation("MatchdayTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.Country", "Country")
                        .WithMany("Person")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Team", "Team")
                        .WithMany("Person")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.HasOne("Domain.Country", "Country")
                        .WithMany("Player")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Team", "Team")
                        .WithMany("Player")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.HasOne("Domain.League", "League")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Domain.User", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Navigation("League");

                    b.Navigation("Person");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.FantasyLeague", b =>
                {
                    b.Navigation("FantasyLeagueAdmins");

                    b.Navigation("FantasyLeagueTeams");
                });

            modelBuilder.Entity("Domain.FantasyTeam", b =>
                {
                    b.Navigation("FantasyLeagueTeams");

                    b.Navigation("MatchdayTeamConfiguration");
                });

            modelBuilder.Entity("Domain.Formation", b =>
                {
                    b.Navigation("MatchdayTeamConfiguration");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Navigation("MatchDays");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Matchday", b =>
                {
                    b.Navigation("MatchdayTeamConfiguration");
                });

            modelBuilder.Entity("Domain.MatchdayTeam", b =>
                {
                    b.Navigation("MatchdayTeamConfiguration");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("FantasyLeagueAdmins");

                    b.Navigation("FantasyTeams");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Navigation("BenchOneMatchdayTeams");

                    b.Navigation("BenchThreeMatchdayTeams");

                    b.Navigation("BenchTwoMatchdayTeams");

                    b.Navigation("DefenderFiveFantasyTeams");

                    b.Navigation("DefenderFourFantasyTeams");

                    b.Navigation("DefenderOneFantasyTeams");

                    b.Navigation("DefenderThreeFantasyTeams");

                    b.Navigation("DefenderTwoFantasyTeams");

                    b.Navigation("ForwardFiveFantasyTeams");

                    b.Navigation("ForwardFourFantasyTeams");

                    b.Navigation("ForwardOneFantasyTeams");

                    b.Navigation("ForwardThreeFantasyTeams");

                    b.Navigation("ForwardTwoFantasyTeams");

                    b.Navigation("GoalieMatchdayTeams");

                    b.Navigation("GoalieOneFantasyTeams");

                    b.Navigation("GoalieTwoFantasyTeams");

                    b.Navigation("MatchdayTeamConfiguration");

                    b.Navigation("MidfielderFiveFantasyTeams");

                    b.Navigation("MidfielderFourFantasyTeams");

                    b.Navigation("MidfielderOneFantasyTeams");

                    b.Navigation("MidfielderThreeFantasyTeams");

                    b.Navigation("MidfielderTwoFantasyTeams");

                    b.Navigation("PlayerEightMatchdayTeams");

                    b.Navigation("PlayerFiveMatchdayTeams");

                    b.Navigation("PlayerFourMatchdayTeams");

                    b.Navigation("PlayerNineMatchdayTeams");

                    b.Navigation("PlayerOneMatchdayTeams");

                    b.Navigation("PlayerSevenMatchdayTeams");

                    b.Navigation("PlayerSixMatchdayTeams");

                    b.Navigation("PlayerTenMatchdayTeams");

                    b.Navigation("PlayerThreeMatchdayTeams");

                    b.Navigation("PlayerTwoMatchdayTeams");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Navigation("Person");

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}

{"ast":null,"code":"var _jsxFileName = \"G:\\\\Personal Projects\\\\UntitledProject\\\\untitled-project\\\\src\\\\app\\\\shared\\\\privateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { Redirect, Route, useLocation } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  isAuthenticated,\n  authenticationPath,\n  redirectPath,\n  setRedirectPath,\n  ...routeProps\n}) {\n  _s();\n\n  const currentLocation = useLocation();\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setRedirectPath(currentLocation.pathname);\n    }\n  }, [isAuthenticated, setRedirectPath, currentLocation]);\n\n  if (isAuthenticated && redirectPath === currentLocation.pathname) {\n    return /*#__PURE__*/_jsxDEV(Route, { ...routeProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: isAuthenticated ? redirectPath : authenticationPath\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(ProtectedRoute, \"xsmL4RZYxBMPC6uWxp/3F3peaQ4=\", false, function () {\n  return [useLocation];\n});\n\n_c = ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["G:/Personal Projects/UntitledProject/untitled-project/src/app/shared/privateRoute.tsx"],"names":["useEffect","Redirect","Route","useLocation","ProtectedRoute","isAuthenticated","authenticationPath","redirectPath","setRedirectPath","routeProps","currentLocation","pathname"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAAsCC,WAAtC,QAAyD,cAAzD;;AASA,eAAe,SAASC,cAAT,CAAwB;AACrCC,EAAAA,eADqC;AAErCC,EAAAA,kBAFqC;AAGrCC,EAAAA,YAHqC;AAIrCC,EAAAA,eAJqC;AAKrC,KAAGC;AALkC,CAAxB,EAMS;AAAA;;AACtB,QAAMC,eAAe,GAAGP,WAAW,EAAnC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,eAAL,EAAsB;AACpBG,MAAAA,eAAe,CAACE,eAAe,CAACC,QAAjB,CAAf;AACD;AACF,GAJQ,EAIN,CAACN,eAAD,EAAkBG,eAAlB,EAAmCE,eAAnC,CAJM,CAAT;;AAMA,MAAIL,eAAe,IAAIE,YAAY,KAAKG,eAAe,CAACC,QAAxD,EAAkE;AAChE,wBAAO,QAAC,KAAD,OAAWF;AAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AAAEE,QAAAA,QAAQ,EAAEN,eAAe,GAAGE,YAAH,GAAkBD;AAA7C;AADN;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;AACF;;GAxBuBF,c;UAOED,W;;;KAPFC,c","sourcesContent":["import { useEffect } from 'react';\r\nimport { Redirect, Route, RouteProps, useLocation } from 'react-router';\r\n\r\nexport type ProtectedRouteProps = {\r\n  isAuthenticated: boolean;\r\n  authenticationPath: string;\r\n  redirectPath: string;\r\n  setRedirectPath: (path: string) => void;\r\n} & RouteProps;\r\n\r\nexport default function ProtectedRoute({\r\n  isAuthenticated,\r\n  authenticationPath,\r\n  redirectPath,\r\n  setRedirectPath,\r\n  ...routeProps\r\n}: ProtectedRouteProps) {\r\n  const currentLocation = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      setRedirectPath(currentLocation.pathname);\r\n    }\r\n  }, [isAuthenticated, setRedirectPath, currentLocation]);\r\n\r\n  if (isAuthenticated && redirectPath === currentLocation.pathname) {\r\n    return <Route {...routeProps} />;\r\n  } else {\r\n    return (\r\n      <Redirect\r\n        to={{ pathname: isAuthenticated ? redirectPath : authenticationPath }}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
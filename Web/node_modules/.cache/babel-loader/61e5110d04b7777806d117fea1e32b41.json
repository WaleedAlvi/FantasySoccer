{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { auth } from '../shared/firebase';\nexport default class UserStore {\n  constructor() {\n    this.user = null;\n    this.errorExists = false;\n    this.errorMessage = '';\n\n    this.login = async (email, password) => {\n      try {\n        await auth.signInWithEmailAndPassword(email, password);\n        this.errorExists = false;\n        this.errorMessage = '';\n        this.setUser();\n      } catch (error) {\n        this.errorExists = true;\n        this.errorMessage = error.message;\n      }\n    };\n\n    this.logout = async () => {\n      try {\n        await auth.signOut();\n        this.user = null;\n      } catch (error) {}\n    };\n\n    this.signup = async (email, password, confirmPassword) => {\n      if (password === confirmPassword) {\n        this.errorExists = false;\n        this.errorMessage = '';\n\n        try {\n          await auth.createUserWithEmailAndPassword(email, password);\n          this.setUser();\n        } catch (error) {\n          this.errorExists = true;\n          this.errorMessage = error.message;\n        }\n      } else {\n        this.errorExists = true;\n        this.errorMessage = 'Passwords do not match';\n      }\n    };\n\n    this.setUser = async () => {\n      await auth.onAuthStateChanged(user => {\n        this.errorExists = false;\n        this.errorMessage = '';\n        this.user = {\n          name: '',\n          email: user === null || user === void 0 ? void 0 : user.email,\n          userToken: user === null || user === void 0 ? void 0 : user.uid\n        };\n      });\n    };\n\n    this.resertPassword = async email => {\n      this.errorExists = false;\n      this.errorMessage = '';\n\n      try {\n        await auth.sendPasswordResetEmail(email);\n      } catch (error) {\n        this.errorExists = true;\n        this.errorMessage = error.message;\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n  get IsLoggedIn() {\n    return !!this.user;\n  }\n\n}","map":{"version":3,"sources":["G:/Personal Projects/UntitledProject/untitled-project/src/app/stores/userStore.ts"],"names":["makeAutoObservable","auth","UserStore","constructor","user","errorExists","errorMessage","login","email","password","signInWithEmailAndPassword","setUser","error","message","logout","signOut","signup","confirmPassword","createUserWithEmailAndPassword","onAuthStateChanged","name","userToken","uid","resertPassword","sendPasswordResetEmail","IsLoggedIn"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AAEA,SAASC,IAAT,QAAqB,oBAArB;AAEA,eAAe,MAAMC,SAAN,CAAgB;AAM3BC,EAAAA,WAAW,GAAG;AAAA,SALdC,IAKc,GALO,IAKP;AAAA,SAJdC,WAIc,GAJS,KAIT;AAAA,SAHdC,YAGc,GAHS,EAGT;;AAAA,SAQdC,KARc,GAQN,OAAOC,KAAP,EAAsBC,QAAtB,KAA2C;AAE/C,UAAI;AACA,cAAMR,IAAI,CAACS,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAN;AACA,aAAKJ,WAAL,GAAmB,KAAnB;AACA,aAAKC,YAAL,GAAoB,EAApB;AACA,aAAKK,OAAL;AACH,OALD,CAKE,OAAOC,KAAP,EAAc;AACZ,aAAKP,WAAL,GAAmB,IAAnB;AACA,aAAKC,YAAL,GAAoBM,KAAK,CAACC,OAA1B;AACH;AACJ,KAnBa;;AAAA,SAqBdC,MArBc,GAqBL,YAAY;AACjB,UAAI;AACA,cAAMb,IAAI,CAACc,OAAL,EAAN;AACA,aAAKX,IAAL,GAAY,IAAZ;AACH,OAHD,CAGE,OAAMQ,KAAN,EAAa,CAEd;AAEJ,KA7Ba;;AAAA,SA+BdI,MA/Bc,GA+BL,OAAOR,KAAP,EAAsBC,QAAtB,EAAwCQ,eAAxC,KAAmE;AACxE,UAAIR,QAAQ,KAAKQ,eAAjB,EAAkC;AAC9B,aAAKZ,WAAL,GAAmB,KAAnB;AACA,aAAKC,YAAL,GAAoB,EAApB;;AACA,YAAI;AACA,gBAAML,IAAI,CAACiB,8BAAL,CAAoCV,KAApC,EAA2CC,QAA3C,CAAN;AACA,eAAKE,OAAL;AACH,SAHD,CAGE,OAAMC,KAAN,EAAa;AACX,eAAKP,WAAL,GAAmB,IAAnB;AACA,eAAKC,YAAL,GAAoBM,KAAK,CAACC,OAA1B;AACH;AACJ,OAVD,MAUO;AACH,aAAKR,WAAL,GAAmB,IAAnB;AACA,aAAKC,YAAL,GAAoB,wBAApB;AACH;AACJ,KA9Ca;;AAAA,SAgDdK,OAhDc,GAgDJ,YAAY;AAClB,YAAMV,IAAI,CAACkB,kBAAL,CAAwBf,IAAI,IAAI;AAClC,aAAKC,WAAL,GAAmB,KAAnB;AACA,aAAKC,YAAL,GAAoB,EAApB;AACA,aAAKF,IAAL,GAAY;AACRgB,UAAAA,IAAI,EAAE,EADE;AAERZ,UAAAA,KAAK,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEI,KAFL;AAGRa,UAAAA,SAAS,EAAEjB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEkB;AAHT,SAAZ;AAKH,OARK,CAAN;AASH,KA1Da;;AAAA,SA4DdC,cA5Dc,GA4DG,MAAOf,KAAP,IAAyB;AACtC,WAAKH,WAAL,GAAmB,KAAnB;AACA,WAAKC,YAAL,GAAoB,EAApB;;AACA,UAAI;AACA,cAAML,IAAI,CAACuB,sBAAL,CAA4BhB,KAA5B,CAAN;AACH,OAFD,CAEE,OAAMI,KAAN,EAAa;AACX,aAAKP,WAAL,GAAmB,IAAnB;AACA,aAAKC,YAAL,GAAoBM,KAAK,CAACC,OAA1B;AACH;AACJ,KArEa;;AACVb,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEa,MAAVyB,UAAU,GAAG;AACb,WAAO,CAAC,CAAC,KAAKrB,IAAd;AACH;;AAZ0B","sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { IUser } from '../models/user';\r\nimport { auth } from '../shared/firebase';\r\n\r\nexport default class UserStore {\r\n    user: IUser | null = null;\r\n    errorExists: boolean = false;\r\n    errorMessage: string = '';\r\n    \r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get IsLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (email: string, password: string) => {\r\n\r\n        try {\r\n            await auth.signInWithEmailAndPassword(email, password);\r\n            this.errorExists = false;\r\n            this.errorMessage = '';\r\n            this.setUser();\r\n        } catch (error) {\r\n            this.errorExists = true;\r\n            this.errorMessage = error.message;\r\n        }\r\n    }\r\n\r\n    logout = async () => {\r\n        try {\r\n            await auth.signOut();\r\n            this.user = null;\r\n        } catch(error) {\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    signup = async (email: string, password: string, confirmPassword:string) => {\r\n        if (password === confirmPassword) {\r\n            this.errorExists = false;\r\n            this.errorMessage = '';\r\n            try {\r\n                await auth.createUserWithEmailAndPassword(email, password);\r\n                this.setUser();\r\n            } catch(error) {\r\n                this.errorExists = true;\r\n                this.errorMessage = error.message;\r\n            }\r\n        } else {\r\n            this.errorExists = true;\r\n            this.errorMessage = 'Passwords do not match';\r\n        }\r\n    }\r\n\r\n    setUser = async () => {\r\n        await auth.onAuthStateChanged(user => {\r\n            this.errorExists = false;\r\n            this.errorMessage = '';\r\n            this.user = {\r\n                name: '',\r\n                email: user?.email,\r\n                userToken: user?.uid\r\n            }\r\n        })\r\n    }\r\n\r\n    resertPassword = async (email: string) => {\r\n        this.errorExists = false;\r\n        this.errorMessage = '';\r\n        try {\r\n            await auth.sendPasswordResetEmail(email);\r\n        } catch(error) {\r\n            this.errorExists = true;\r\n            this.errorMessage = error.message;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"G:\\\\Personal Projects\\\\UntitledProject\\\\untitled-project\\\\src\\\\app\\\\shared\\\\privateRoute.tsx\";\nimport React from 'react';\nimport { Redirect, Route } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  isAuth,\n  redirectPath,\n  path,\n  component\n}) => {\n  return isAuth ? /*#__PURE__*/_jsxDEV(Route, {\n    exact: true,\n    path: path,\n    component: component,\n    render: undefined\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: redirectPath\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["G:/Personal Projects/UntitledProject/untitled-project/src/app/shared/privateRoute.tsx"],"names":["React","Redirect","Route","PrivateRoute","isAuth","redirectPath","path","component","undefined","pathname"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAA4C,cAA5C;;;AASA,MAAMC,YAA0C,GAAG,CAAC;AAClDC,EAAAA,MADkD;AAElDC,EAAAA,YAFkD;AAGlDC,EAAAA,IAHkD;AAIlDC,EAAAA;AAJkD,CAAD,KAK7C;AACJ,SAAOH,MAAM,gBACX,QAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAEE,IAAnB;AAAyB,IAAA,SAAS,EAAEC,SAApC;AAA+C,IAAA,MAAM,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,UADW,gBAGX,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEC,MAAAA,QAAQ,EAAEJ;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,UAHF;AAKD,CAXD;;KAAMF,Y;AAaN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route, RouteProps } from 'react-router';\r\n\r\nexport interface IPrivateRouteProps extends RouteProps {\r\n  isAuth: boolean; // is authenticate route\r\n  redirectPath: string; // redirect path if don't authenticate route\r\n  path: string;\r\n  component: any;\r\n}\r\n\r\nconst PrivateRoute: React.FC<IPrivateRouteProps> = ({\r\n  isAuth,\r\n  redirectPath,\r\n  path,\r\n  component,\r\n}) => {\r\n  return isAuth ? (\r\n    <Route exact path={path} component={component} render={undefined} />\r\n  ) : (\r\n    <Redirect to={{ pathname: redirectPath }} />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}